<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        fwAnVrDlPfkwgQAAAABJRU5ErkJggg==
</value>
  </data>
</root>